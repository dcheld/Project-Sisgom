[comment encoding = UTF-8 /]
[module fileUtils('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::acceleo::sisgom::properties::properties /]

[**
 * Generates the file path for the given type (ex: /a/b/c/d/type.java).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genFilePath(aType : Type)]
[aType.getSourceFolder() + aType.packagePath() + aType.name/].java
[/template]

[**
 * Computes the package path for the given type (ex: /a/b/c/d/).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template private packagePath(aType : Type)] 
[aType.ancestors(Package)->reject(aPackage: Package | aPackage.oclIsTypeOf(Model))->reverse().name.substituteAll('.', '/').concat('/')->sep('/')/]
[/template]

[**
 * Returns the package value for the given type (ex: a.b.c.d).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genPackageValue(aType : Type)]
[aType.ancestors(Package)->reject(aPackage: Package | aPackage.oclIsTypeOf(Model))->reverse().name->sep('.')/]
[/template]

[**
 * Generates the copyright header located at the top of each class, interface or enumeration file.
 * @param aType The type used for the generation.
 */]
[template public genCopyrightHeader(aType : Type)]
/**
 * Generated by Acceleo 3
 * All rights reserved.
 */
[/template]

[**
 * Generates the default import block for the given type.
 * @param aType The type
 */]
[template public genDefaultImport(aType : Classifier)]
[if (aType.attribute->exists(property : Property | property.upper = -1 or property.upper > 1))]
    import java.util.*;
[/if]
[if (aType.oclIsTypeOf(Class))]
	[genElemetsImport(aType.oclAsType(Class)) /]
[elseif (aType.oclIsTypeOf(Interface))]
	[genElemetsImport(aType.oclAsType(Interface)) /]
[/if]

// [protected ('for imports')]

// [/protected]
[/template]


[template private genElemetsImport (aClass : Class) ]
[for (eClass : Type | aClass.obterTodosOsTipo())]
[if (aClass.genPackageValue() <>  eClass.genPackageValue() and eClass.genPackageValue() <> '')]
import [eClass.genPackageValue()+ '.' + eClass.name  /];
[/if]
[/for ]
[/template]

[template private genElemetsImport (aInterface : Interface) ]
[for (eInterface : Type | aInterface.getAllAttributes()->collect(s : Property | s.type)->union(aInterface.getOperations().ownedParameter
	->collect(c  : Parameter | c.type))
	->reject(tipo : Type | tipo.oclIsKindOf(PrimitiveType))->asOrderedSet())]
[if (aInterface.genPackageValue() <>  eInterface.genPackageValue() and eInterface.genPackageValue() <> '')]
import [eInterface.genPackageValue()+ '.' + eInterface.name  /];
[/if]
[/for ]
[/template]

[query private obterTodosOsTipo(aClass : Class) : OrderedSet(Type) = 
aClass.getAllAttributes()->collect(s : Property | s.type)->union(aClass.getOperations()->union(aClass.getImplementedInterfaces().ownedOperation).ownedParameter
	->collect(c  : Parameter | c.type))
	->reject(tipo : Type | tipo.oclIsTypeOf(PrimitiveType))->asOrderedSet() /]


[query private obterTodosOsTipo(aInterface : Interface) : OrderedSet(Type) = 
aInterface.getAllAttributes()->collect(s : Property | s.type)->union(aInterface.getOperations().ownedParameter
	->collect(c  : Parameter | c.type))
	->reject(tipo : Type | tipo.oclIsTypeOf(PrimitiveType))->asOrderedSet() /]