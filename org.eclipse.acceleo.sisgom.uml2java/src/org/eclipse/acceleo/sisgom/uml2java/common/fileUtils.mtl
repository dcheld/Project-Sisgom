[comment encoding = UTF-8 /]
[module fileUtils('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::acceleo::sisgom::properties::properties /]

[**
 * Generates the file path for the given type (ex: /a/b/c/d/type.java).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genFilePathEntity(aType : Type)]
[ aType.getSourceFolderClass() + '/' + aType.packagePath() + '/' + aType.getEntityNamespace() + '/' + aType.name/]Entity.java
[/template]

[template public genFilePathServlets(aType : Type, tipo : String)]
[ aType.getSourceFolderClass() + '/' + aType.packagePath() + '/' + aType.getServletsNamespace() + '/' + aType.name + tipo/]Servlet.java
[/template]

[template public genFilePathDao(aType : Type)]
[ aType.getSourceFolderClass() + '/' + aType.packagePath() + '/' + aType.getDaoNamespace() + '/' + aType.name/]Dao.java
[/template]

[template public genFilePathUtils(aType : Package, nome : String)]
[ aType.getSourceFolderClass() + '/' + aType.packagePath() + '/' + aType.getUtilsNamespace() + '/' + nome/].java
[/template]


[template public packagePath(aType : Type)] 
[aType.ancestors(Package)->reject(aPackage: Package | aPackage.oclIsTypeOf(Model))->reverse().name.substituteAll('.', '/').concat('/')->sep('/')/]
[/template]

[template public packagePath(aPack : Package)]
[aPack.name.substituteAll('.', '/').concat('/')->sep('/')/]
[/template]

[**
 * Returns the package value for the given type (ex: a.b.c.d).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genPackageEntity(aClass : Class)]
[aClass.genPackageValue() + '.' + aClass.getEntityNamespace()/]
[/template]

[template public genPackageDao(aClass : Class)]
[aClass.genPackageValue() + '.' + aClass.getDaoNamespace()/]
[/template]

[template public genPackageValue(aType : Type)]
[aType.ancestors(Package)->reject(aPackage: Package | aPackage.oclIsTypeOf(Model))->reverse().name->sep('.')/]
[/template]

[**
 * Generates the default import block for the given type.
 * @param aType The type
 */]
[template public genDefaultImport(aType : Classifier)post (trim())]
[if (aType.oclIsTypeOf(Class) and aType.oclAsType(Class).superClass->isEmpty())]
[let pack : Package = aType.getPackageBase()]
import [pack.name + '.utils.' + pack.getGenericDao()/].BaseBean;
[/let]

[/if]
[if (aType.attribute->exists(property : Property | property.upper = -1 or property.upper > 1))]
import java.util.List;
[/if]
[if (aType.oclIsTypeOf(Class))]
	[let aClass : Class = aType.oclAsType(Class)]
	[aClass.obterTodosOsTipo().genElementsImportGeneric(aType) /]
	[aClass.importEntityNamespece() /]
	[/let]
[elseif (aType.oclIsTypeOf(Interface))]
	[aType.oclAsType(Interface).obterTodosOsTipo().genElementsImportGeneric(aType) /]
[/if]
// [protected ('for imports')]
// [/protected]
[/template]

[template public genElementsImportGeneric(aType : Type, aPai: Classifier)post (trim())]
[if (aType.oclIsTypeOf(DataType))]
[if (getProperty(aType.name) <> '')]
import [getProperty(aType.name)/];
[/if]
[elseif (aType.genPackageValue() <>  aPai.genPackageValue() and aType.genPackageValue() <> '')]
import [aType.genPackageValue()+ '.' + aType.name  /];
[/if]
[/template]

[template public importEntityNamespece(aClass : Class) post (trim())]
[if (aClass.hasStereotypeQuery('Entity'))]
import [aClass.getJavaxPersistence() /];
[/if]
[/template]

[query public getPackageBase(model : OclAny) : Package = 
	self.ancestors(Package)->select(f: Package | f.hasStereotypeQuery('MainPackage'))->first() /]


[query private obterTodosOsTipo(aClass : Class) : OrderedSet(Type) = 
aClass.getAllAttributes()->collect(s : Property | s.type)->union(aClass.getOperations()->union(aClass.getImplementedInterfaces().ownedOperation).ownedParameter
	->collect(c  : Parameter | c.type))->reject(tipo : Type | tipo.oclIsTypeOf(PrimitiveType)) ->asOrderedSet() /]


[query private obterTodosOsTipo(aInterface : Interface) : OrderedSet(Type) = 
aInterface.getAllAttributes()->collect(s : Property | s.type)->union(aInterface.getOperations().ownedParameter
	->collect(c  : Parameter | c.type))->reject(tipo : Type | tipo.oclIsTypeOf(PrimitiveType))->asOrderedSet() /]

[query public getTaggedValue(stereotypedElement : Element, stereotypeName : String, propertyName : String) : OclAny = 
   let stereotype : Stereotype = stereotypedElement.getAppliedStereotype(stereotypeName) in
     if not stereotype.oclIsUndefined() then
       stereotypedElement.getValue(stereotype, propertyName)
     else 
       null
     endif/]

[query public hasStereotypeQuery(elem : Element, name : String) : Boolean = 
	self.getAppliedStereotypes()->exists(e : Stereotype | e.name = name)
 /]

[query public getStereotypeQuery(elem : Element, name : String) : Stereotype = 
	self.getAppliedStereotypes()->select(e : Stereotype | e.name = name)->asOrderedSet()->first()
 /]