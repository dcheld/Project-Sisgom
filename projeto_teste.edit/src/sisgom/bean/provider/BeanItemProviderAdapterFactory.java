/**
 */
package sisgom.bean.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import sisgom.bean.util.BeanAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BeanItemProviderAdapterFactory extends BeanAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BeanItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Endereco} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnderecoItemProvider enderecoItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Endereco}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnderecoAdapter() {
		if (enderecoItemProvider == null) {
			enderecoItemProvider = new EnderecoItemProvider(this);
		}

		return enderecoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Fornecedor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FornecedorItemProvider fornecedorItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Fornecedor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFornecedorAdapter() {
		if (fornecedorItemProvider == null) {
			fornecedorItemProvider = new FornecedorItemProvider(this);
		}

		return fornecedorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Funcionario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncionarioItemProvider funcionarioItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Funcionario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncionarioAdapter() {
		if (funcionarioItemProvider == null) {
			funcionarioItemProvider = new FuncionarioItemProvider(this);
		}

		return funcionarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Cliente} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClienteItemProvider clienteItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Cliente}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClienteAdapter() {
		if (clienteItemProvider == null) {
			clienteItemProvider = new ClienteItemProvider(this);
		}

		return clienteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Contato} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContatoItemProvider contatoItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Contato}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContatoAdapter() {
		if (contatoItemProvider == null) {
			contatoItemProvider = new ContatoItemProvider(this);
		}

		return contatoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Servico} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServicoItemProvider servicoItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Servico}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServicoAdapter() {
		if (servicoItemProvider == null) {
			servicoItemProvider = new ServicoItemProvider(this);
		}

		return servicoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.OrdemDeServico} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrdemDeServicoItemProvider ordemDeServicoItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.OrdemDeServico}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrdemDeServicoAdapter() {
		if (ordemDeServicoItemProvider == null) {
			ordemDeServicoItemProvider = new OrdemDeServicoItemProvider(this);
		}

		return ordemDeServicoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Peca} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PecaItemProvider pecaItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Peca}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPecaAdapter() {
		if (pecaItemProvider == null) {
			pecaItemProvider = new PecaItemProvider(this);
		}

		return pecaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.Veiculo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VeiculoItemProvider veiculoItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.Veiculo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVeiculoAdapter() {
		if (veiculoItemProvider == null) {
			veiculoItemProvider = new VeiculoItemProvider(this);
		}

		return veiculoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sisgom.bean.ItensDeServico} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItensDeServicoItemProvider itensDeServicoItemProvider;

	/**
	 * This creates an adapter for a {@link sisgom.bean.ItensDeServico}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItensDeServicoAdapter() {
		if (itensDeServicoItemProvider == null) {
			itensDeServicoItemProvider = new ItensDeServicoItemProvider(this);
		}

		return itensDeServicoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (enderecoItemProvider != null) enderecoItemProvider.dispose();
		if (fornecedorItemProvider != null) fornecedorItemProvider.dispose();
		if (funcionarioItemProvider != null) funcionarioItemProvider.dispose();
		if (clienteItemProvider != null) clienteItemProvider.dispose();
		if (contatoItemProvider != null) contatoItemProvider.dispose();
		if (servicoItemProvider != null) servicoItemProvider.dispose();
		if (ordemDeServicoItemProvider != null) ordemDeServicoItemProvider.dispose();
		if (pecaItemProvider != null) pecaItemProvider.dispose();
		if (veiculoItemProvider != null) veiculoItemProvider.dispose();
		if (itensDeServicoItemProvider != null) itensDeServicoItemProvider.dispose();
	}

}
